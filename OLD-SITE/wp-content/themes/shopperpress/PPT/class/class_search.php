<?php

/***************** DO NOT EDIT THIS FILE *************************
******************************************************************

INFORMATION:
------------

This is a core theme file, you should not need to edit 
this file directly. Code changes maybe lost during updates.

LAST UPDATED: June 26th 2011
EDITED BY: MARK FAIL
------------------------------------------------------------------

******************************************************************/
 
$debugMode =  false;

if ( !defined('WP_CONTENT_URL') )
	define( 'WP_CONTENT_URL', get_option('siteurl') . '/wp-content');
if ( !defined('WP_CONTENT_DIR') )
	define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );
	
	
	class PPT_S extends DB_Search_Widget1 {
	
	
	
	
function form_outputForm($values,$pref){

?>

<div class="grid400-left"> 

<?php if(get_option("display_advanced_search") ==1){ ?>
<fieldset>
<div class="titleh"> <h3><img src="<?php echo PPT_FW_IMG_URI; ?>admin/a1.gif" style="float:left; margin-right:8px;" /> Search Box Settings</h3></div>

<div class="ppt-form-line">	
<p><input type='checkbox' <?php if(get_option("display_advanced_search") ==1){ echo "checked"; } ?> name="display_advanced_search" value="1"/> Display Submenu Link</p>

<p class="ppnote"><b>Note.</b> Use this instead of the sidebar widget.If you are using the sidebar widget this is best unticked.</p>

<hr />
<span class="ppt-labeltext">Box Title</span>

<input type='text' class='ppt-forminput' id='<?php echo $prefId?>[name]' name='<?php echo $pref?>[name]' value='<?php echo $values['name']?>'/> 
<div class="clearfix"></div>
</div> <br />
 <input class="premiumpress_button" type="submit" value="Save Changes" onclick="document.getElementById('showThisTab').value=5" style="color:white;" />      
</fieldset>
<?php } ?>

 <div class="videobox" id="videobox553" >
<a href="javascript:void(0);" onclick="PlayPPTVideo('MoIYPeszgPg','videobox553');"><img src="<?php echo $GLOBALS['template_url']; ?>/PPT/img/admin/video/1.jpg" align="absmiddle" /></a>
</div>  

</div><div class="grid400-left last" >
 
 



<?php 

			$defaults=$this->getDefaultConfig();
			$prefId = preg_replace('/^.*\[([^]]*)\]$/','\\1',$pref);
			$this->form_existsInput($pref);
			$rand = rand();
?>
 	<div id='config-template-<?php echo $prefId?>' style='display: none;'>
	<?php 
		$templateDefaults = $defaults[1];
		$templateDefaults['label'] = 'Field ###TEMPLATE_ID###';
		echo  $this->singleFieldHTML($pref,'###TEMPLATE_ID###',$templateDefaults);
	?>
	</div>

<?php
			foreach($this->getClasses('input') as $class=>$desc) {
				if(class_exists($class))
					$form = new $class();
				else $form = false;
				if(compat_method_exists1($form,'getConfigForm')){
					if($form = $form->getConfigForm($pref.'[###TEMPLATE_ID###]',array('name'=>'###TEMPLATE_NAME###'))){
?>
	<div id='config-input-templates-<?php echo $class?>-<?php echo $prefId?>' style='display: none;'>
		<?php echo $form?>
	</div>
		
<?php					}
				}
			}
 ?>
	<div id='config-form-<?php echo $prefId?>'>
<?php
			if(!$values) $values = $defaults;
			$maxId=0;
			$presets = $this->getPresets();
			array_unshift($presets,__('NONE','premiumpress_advancedsearch'));
 




			/*$dd = new AdminDropDown1($pref."[preset]",$values['preset'],$presets);
			echo $dd->getInput()."</div>";*/
			$nonFields = $this->getNonInputFields();
			foreach($values as $id => $val){
				$maxId = max($id,$maxId);
				if(in_array($id,$nonFields)) continue;
				echo "<div id='config-form-$prefId-$id'>".$this->singleFieldHTML($pref,$id,$val)."</div>";
			}
?>
 
 
 
 
  

    
	<script type='text/javascript'>
			CustomSearch.create('<?php echo $prefId?>','<?php echo $maxId?>');
<?php
	foreach($this->getClasses('joiner') as $joinerClass=>$desc){
		if(compat_method_exists1($joinerClass,'getSuggestedFields')){
			$options = eval("return $joinerClass::getSuggestedFields();");
			$str = '';
			foreach($options as $i=>$v){
				$k=$i;
				if(is_numeric($k)) $k=$v;
				$options[$i] = json_encode(array('id'=>$k,'name'=>$v));
			}
			$str = '['.join(',',$options).']';
			echo "CustomSearch.setOptionsFor('$joinerClass',".$str.");\n";
		}elseif(eval("return $joinerClass::needsField();")){
			echo "CustomSearch.setOptionsFor('$joinerClass',[]);\n";
		}
	}
?>
	</script>
    
 <div class="clearfix"></div>  
     
 <p><a href='#' onclick="return CustomSearch.get('<?php echo $prefId?>').add();" class="button-primary" style="float:right;">Add Search Field</a></p>    

 

</div>  
 
 </div>

<div class="clearfix"></div>   
    <a name="botm"></a>
<?php
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		function PPT_S($params=array()){
			PPT_S::__construct($params);
		}
		
		function __construct($params=array()){
		
			 
			parent::__construct(__('Custom Fields ','premiumpress_advancedsearch'),$params); 
			add_filter('the_content', array(&$this,'process_tag'),9);
			
			// DETERMIN IF WE NEED TO INCLUDE SCRIPTACLOUR
			$showS = false;
			$d = get_option('ppt_s');
			if(is_array($d['preset-default'])){
				$i=0;
				while($i < count($d['preset-default'])){
				
				if(isset($d['preset-default'][$i]['input']) && $d['preset-default'][$i]['input'] == "SliderField"){
						$showS=true;
				}
				
				$i++;
				} 
			
			}
			
			if($showS){
			wp_enqueue_script( 'scriptaculous-slider' );
			}
			 
 
		}
		function init(){
			global $CustomSearchFieldStatic;
			$CustomSearchFieldStatic['Object'] = new PPT_S();
			 
		}
 

		function upgrade($current,$target){
			$options = $this->getConfig();
			if(version_compare($current,"0.3")<0){
				$config = $this->getDefaultConfig();
				$config['name'] = __('Default Preset','premiumpress_advancedsearch');
				$options['preset-default'] = $config;
			}
			$options['version']=$target;
			update_option($this->id,$options);
		}

		function getInputs($params = false,$visitedPresets=array()){
			
			/*if(is_array($params)){
				$id = "preset-default";//$params['widget_id'];
			} else {
				$id = $params;
			}*/
			$id = "preset-default";
			
			if(!isset($visitedPresets[$id])){ $visitedPresets[$id] = ""; }// PP EDIT
			
			if($visitedPresets[$id]) return array();
			$visitedPresets[$id]=true;
			
			global $CustomSearchFieldStatic;
			
			if(!isset($CustomSearchFieldStatic['Inputs'][$id])){ $CustomSearchFieldStatic['Inputs'][$id] = ""; } // PP EDIT
			
			if(!$CustomSearchFieldStatic['Inputs'][$id]){
			
				$config = $this->getConfig($id);
				$inputs = array();
				
				//if($config['preset']) $inputs = $this->getInputs($config['preset'],$visitedPresets); // PP EDIT
				
				$nonFields = $this->getNonInputFields();
				if($config)
				foreach($config as $k=>$v){
					if(in_array($k,$nonFields)) continue;
					if(!(class_exists($v['input']) && class_exists($v['comparison']) && class_exists($v['joiner']))) {
						continue;
					}
					$inputs[] =  new CustomSearchField($v);

				}
				foreach($inputs as $k=>$v){
					$inputs[$k]->setIndex($k);
				}
				$CustomSearchFieldStatic['Inputs'][$id]=$inputs;
			}
			return $CustomSearchFieldStatic['Inputs'][$id];
		}
		function getTitle($params){
			$config = $this->getConfig($params['widget_id']);
			if(!isset($config['name'])){ $config['name'] = ""; }
			return $config['name'];
		}

		function form_processPost($post,$old){
			unset($post['###TEMPLATE_ID###']);
			if(!$post) $post=array('exists'=>1);
			return $post;
		}
		function getDefaultConfig(){
			return array('name'=>'Site Search', 
				1=>array(
					'label'=>__('Key Words','premiumpress_advancedsearch'),
					'input'=>'TextField',
					'comparison'=>'WordsLikeComparison',
					'joiner'=>'PostDataJoiner',
					'name'=>'all'
				),
				2=>array(
					'label'=>__('Category','premiumpress_advancedsearch'),
					'input'=>'DropDownField',
					'comparison'=>'EqualComparison',
					'joiner'=>'CategoryJoiner'
				),
			);
		}
		
		
		
		
		function getNonInputFields(){
			return array('exists','name','preset','version');
		}
		
		
		function singleFieldHTML($pref,$id,$values){
		
		global $userdata;
		
			$prefId = preg_replace('/^.*\[([^]]*)\]$/','\\1',$pref);
			$pref = $pref."[$id]";
			$htmlId = $pref."[exists]";
			$output = "
			<fieldset style='float:left; width:370px; margin-left:10px; margin-right:10px;'> <div class='titleh'> <h3>Search Field</h3></div>
			
			 <input type='hidden' name='$htmlId' value='1'/>";
			 
			
			$titles ="
			
			  <p><b>Search Field Caption</b> <a href='#' onclick='return CustomSearch.get(\"$prefId\").toggleOptions(\"$id\");'>+ Show Options</a> </p>";
			
			if(user_can($userdata->ID, 'administrator')){
			$titles .= "<input class='premiumpress_button' type='submit' value='Save Changes' style='color:white; float:right;' onclick=\"document.getElementById('showThisTab').value=5\" />";
			}else{
			$titles .= "<input class='premiumpress_button' type='button' value='Save Changes' style='color:white; float:right;' onclick=\"alert('Disabled in demo mode.')\" />";
			}
			$titles .="<input type='text' name='$pref"."[label]' value='$values[label]' class='ppt-forminput'  />
			
			
			";
	 
			$output.=" $titles  $inputs ";
			
			
			
			
			$output.="<div id='form-field-advancedoptions-$prefId-$id' style='display: none; padding:5px;margin-top:10px;'> 
			 
			<fieldset>
			<legend>Search Field Options</legend> 
			
			 ";
			$inputs='';$titles='';
			
				// 
			$inputs= "<br /><small>Currently set to ".$values['name']."</small>
			
			<div id='form-field-dbname-$prefId-$id' class='form-field-title-div'>
			
			<input type='text' name='$pref"."[name]' value='$values[name]' class='form-field-title'/>
			 
			
			</div> 
			
			
			";
			$count=1;
			
			
			foreach(array('joiner'=>__('Data Type','premiumpress_advancedsearch'),'comparison'=>__('Compare','premiumpress_advancedsearch'),'input'=>__('Widget','premiumpress_advancedsearch')) as $k=>$v){
			
				$dd = new AdminDropDown1($pref."[$k]",$values[$k],$this->getClasses($k),array('onChange'=>'CustomSearch.get("'.$prefId.'").updateOptions("'.$id.'","'.$k.'")','css_class'=>"wpcfs-$k"));
				
				$titles="".$v." <br />".$titles;
				
				$inputs = "".$dd->getInput()."".$inputs."";
				$n=1;
				if(++$count==2){
					$output.="<div class='clearfix'></div><div class='form-class-$k' id='select-".$id."-".$k."-wrapper'>  <p><b>%".$k."</b></p> $inputs </div>";
					$count=0;
					$inputs = $titles='';
					$n++;
				}
			}
			$output = str_replace("%joiner","Select a field to search:",$output);
			$output = str_replace("%input","Select a field type to display:",$output);
			$output = str_replace("%3","input?",$output);
			
			if($titles){
				$output.="<div class='form-field-table'> 1-> $titles <br /> $inputs </div>";
				$inputs = $titles='';
			}
			
			
			$titles.="  ";
			$inputs.="<div id='showtickme-".$id."' style='display:visible'><br /><input type='checkbox' ".($values['numeric']?"checked='true'":"")." name='$pref"."[numeric]' style='float:left; padding-top:10px;'/> Tick this box if the search value is a numerical one. (e.g price) <div class='clearfix'></div></div>";

			if(class_exists($widgetClass = $values['input'])){
				$widget = new $widgetClass();
				if(compat_method_exists1($widget,'getConfigForm'))
					$widgetConfig=$widget->getConfigForm($pref,$values);
			}


			$inputs.="<div id='$this->id"."-$prefId"."-$id"."-widget-config'>$widgetConfig</div>";
			$output.="<table class='form-field-table'><tr>$titles</tr><tr>$inputs</tr></table>";
			 
			
			$output.="</fieldset>
			
			<fieldset style='display:none;'>
			<legend>Field Styling</legend> 
			<p>Css</p>
			<input type='text' name='$pref"."[css]' value='$values[css]' class='form-field-title' style='width:70%;'/>
			
			";
			
			
			
			$output.="</fieldset>";
			
			
			
			
			$output.= "<br /> ";
			
			 
			if(user_can($userdata->ID, 'administrator')){
			$output.= "<input class='premiumpress_button' type='submit' value='Save Changes' style='color:white; ' onclick=\"document.getElementById('showThisTab').value=5\" />";
			}else{
			$output.= "<input class='premiumpress_button' type='button' value='Save Changes' style='color:white; ' onclick=\"alert('Disabled in demo mode.')\" />";
			}
			
			$output.= "<a href='#' onclick=\"return CustomSearch.get('$prefId').remove('$id');\" style='background:red; padding:5px; color:white;margin-bottom:5px; float:right;'>Delete Search Field</a> 
			
			
			<div class='clearfix'></div>
			
			
			</div> 
			
			
			</fieldset>";
			return "$output";
		}

		function getRootURL(){
			return WP_CONTENT_URL .'/plugins/' .  dirname(plugin_basename(__FILE__) ) . '/';
		}
 

		function getJoiners(){
			return $this->getClasses('joiner');
		}
		function getComparisons(){
			return $this->getClasses('comparison');
		}
		function getInputTypes(){
			return $this->getClasses('input');
		}
		function getClasses($type){
			global $CustomSearchFieldStatic;
			if(!$CustomSearchFieldStatic['Types']){
			
			
			
				$CustomSearchFieldStatic['Types'] = array(
					"joiner"=>array(
					
						"PostDataJoiner" =>__( "Wordpress Post Field",'premiumpress_advancedsearch'),						
						"CategoryJoiner" =>__( "Category List",'premiumpress_advancedsearch'),
						"spacer1" =>__( "---------------",'premiumpress_advancedsearch'),
						"PostTypeJoiner" =>__( "Post Type (FAQ / Article / Post) *beta*",'premiumpress_advancedsearch'),						
						"CustomFieldJoiner" =>__( "Custom Field",'premiumpress_advancedsearch'),						 
						"TagJoiner" =>__( "Tag Search",'premiumpress_advancedsearch'),
						"spacer" =>__( "---------------",'premiumpress_advancedsearch'),
						
						"LocationJoiner" =>__( "1. Country List (location taxonomy)",'premiumpress_advancedsearch'),
						"LocationJoiner1" =>__( "2. State List (location taxonomy)",'premiumpress_advancedsearch'),
						"LocationJoiner2" =>__( "3. City List (location taxonomy)",'premiumpress_advancedsearch'),			
						
						
						
					),
					"input"=>array(
						"TextField" =>__( "Text Box",'premiumpress_advancedsearch'),
						"DropDownField" =>__( "List Box",'premiumpress_advancedsearch'),
						//"DropDownFieldAdvanced" =>__( "Drop Down List Box (Advanced)",'premiumpress_advancedsearch'),
						"RadioButtonField" =>__( "Radio Button (multiple choice)",'premiumpress_advancedsearch'),
						//"SliderField" =>__( "Slider (*beta*)",'premiumpress_advancedsearch'),
						//"HiddenField" =>__( "Hidden Constant",'premiumpress_advancedsearch'),
					),
					"comparison"=>array(
						"EqualComparison" =>__( "Equals",'premiumpress_advancedsearch'),
						"LikeComparison" =>__( "Phrase In",'premiumpress_advancedsearch'),
						"WordsLikeComparison" =>__( "Words In",'premiumpress_advancedsearch'),
						"LessThanComparison" =>__( "Less Than",'premiumpress_advancedsearch'),
						"MoreThanComparison" =>__( "More Than",'premiumpress_advancedsearch'),
						"AtMostComparison" =>__( "At Most",'premiumpress_advancedsearch'),
						"AtLeastComparison" =>__( "At Least",'premiumpress_advancedsearch'),
						"RangeComparison" =>__( "Range",'premiumpress_advancedsearch'),
//TODO: Make this work...
//						"NotEqualComparison" =>__( "Not Equal To",'premiumpress_advancedsearch'),
					)
				);
				if(strtolower(constant('PREMIUMPRESS_SYSTEM')) == "couponpress"){
				
				 $CustomSearchFieldStatic['Types'] = array(
					"joiner"=>array(
						"PostDataJoiner" =>__( "Wordpress Post Field",'premiumpress_advancedsearch'),
						"CategoryJoiner" =>__( "Category List",'premiumpress_advancedsearch'),
						"spacer1" =>__( "---------------",'premiumpress_advancedsearch'),
						
						
						"CustomFieldJoiner" =>__( "Custom Field",'premiumpress_advancedsearch'),
						
						"StoresJoiner" =>__( "Stores List (Only stores with coupons will show))",'premiumpress_advancedsearch'),
						"NetworkJoiner" =>__( "Network List (Only networks assigned to coupons will show)",'premiumpress_advancedsearch'),
						 
						//"TagJoiner" =>__( "Tag Search",'premiumpress_advancedsearch'),
						
						"spacer" =>__( "---------------",'premiumpress_advancedsearch'),
						
						"LocationJoiner" =>__( "1. Country List (location taxonomy)",'premiumpress_advancedsearch'),
						"LocationJoiner1" =>__( "2. State List (location taxonomy)",'premiumpress_advancedsearch'),
						"LocationJoiner2" =>__( "3. City List (location taxonomy)",'premiumpress_advancedsearch'),
						//"PostTypeJoiner" =>__( "Post Type",'premiumpress_advancedsearch'),
					),
					"input"=>array(
						"TextField" =>__( "Text Box",'premiumpress_advancedsearch'),
						"DropDownField" =>__( "Drop Down List Box",'premiumpress_advancedsearch'),
						"RadioButtonField" =>__( "Radio Button (multiple choice)",'premiumpress_advancedsearch'),
						//"SliderField" =>__( "Slider (*beta*)",'premiumpress_advancedsearch'),
						//"HiddenField" =>__( "Hidden Constant",'premiumpress_advancedsearch'),
					),
					"comparison"=>array(
						"EqualComparison" =>__( "Equals",'premiumpress_advancedsearch'),
						"LikeComparison" =>__( "Phrase In",'premiumpress_advancedsearch'),
						"WordsLikeComparison" =>__( "Words In",'premiumpress_advancedsearch'),
						"LessThanComparison" =>__( "Less Than",'premiumpress_advancedsearch'),
						"MoreThanComparison" =>__( "More Than",'premiumpress_advancedsearch'),
						"AtMostComparison" =>__( "At Most",'premiumpress_advancedsearch'),
						"AtLeastComparison" =>__( "At Least",'premiumpress_advancedsearch'),
						"RangeComparison" =>__( "Range",'premiumpress_advancedsearch'),
//TODO: Make this work...
//						"NotEqualComparison" =>__( "Not Equal To",'premiumpress_advancedsearch'),
					)
				);
				 
				}elseif(strtolower(constant('PREMIUMPRESS_SYSTEM')) == "shopperpress"){
				
			 $CustomSearchFieldStatic['Types'] = array(
					"joiner"=>array(
						"PostDataJoiner" =>__( "Wordpress Post Field",'premiumpress_advancedsearch'),
						"CustomFieldJoiner" =>__( "Custom Field",'premiumpress_advancedsearch'),
						"CategoryJoiner" =>__( "Category List",'premiumpress_advancedsearch'),
						 "PostTypeJoiner" =>__( "Post Type (FAQ / Article / Post) *beta*",'premiumpress_advancedsearch'),
						"TagJoiner" =>__( "Tag Search",'premiumpress_advancedsearch'),
						//"PostTypeJoiner" =>__( "Post Type",'premiumpress_advancedsearch'),
					),
					"input"=>array(
						"TextField" =>__( "Text Box",'premiumpress_advancedsearch'),
						"DropDownField" =>__( "Drop Down List Box",'premiumpress_advancedsearch'),
						"RadioButtonField" =>__( "Radio Button (multiple choice)",'premiumpress_advancedsearch'),
						//"SliderField" =>__( "Slider (*beta*)",'premiumpress_advancedsearch'),
						//"HiddenField" =>__( "Hidden Constant",'premiumpress_advancedsearch'),
					),
					"comparison"=>array(
						"EqualComparison" =>__( "Equals",'premiumpress_advancedsearch'),
						"LikeComparison" =>__( "Phrase In",'premiumpress_advancedsearch'),
						"WordsLikeComparison" =>__( "Words In",'premiumpress_advancedsearch'),
						"LessThanComparison" =>__( "Less Than",'premiumpress_advancedsearch'),
						"MoreThanComparison" =>__( "More Than",'premiumpress_advancedsearch'),
						"AtMostComparison" =>__( "At Most",'premiumpress_advancedsearch'),
						"AtLeastComparison" =>__( "At Least",'premiumpress_advancedsearch'),
						"RangeComparison" =>__( "Range",'premiumpress_advancedsearch'),
//TODO: Make this work...
//						"NotEqualComparison" =>__( "Not Equal To",'premiumpress_advancedsearch'),
					)
				);
				
				}
				
				$CustomSearchFieldStatic['Types'] = apply_filters('custom_search_get_classes',$CustomSearchFieldStatic['Types']);
			}
			return $CustomSearchFieldStatic['Types'][$type];
		}
	 
		function getPresets(){
			$presets = array();
			$config = $this->getConfig();
			if(is_array($config)){
			foreach(array_keys($config) as $key){
				if(strpos($key,'preset-')===0) {
					$presets[$key] = $key;
					if($name = $config[$key]['name'])
						$presets[$key]=$name;
				}
			}
			}
			return $presets;
		}
		function presets_form(){
		
		//
		$x=1;
		while($x < 20){
		if(isset($_POST['ppt_s']['preset-default'][$x])){ $_POST['ppt_s']['preset-default'][$x]['name'] = $_POST['db_customsearch_widget']['preset-default'][$x]['name']; }
		$x++;} 
		
		
			$presets=$this->getPresets();
			if(!$preset = $_REQUEST['selected-preset']){
				$preset = 'preset-default';
			}
			if(!$presets[$preset]){
				$defaults = $this->getDefaultConfig();
				$options = $this->getConfig();
				$options[$preset] = $defaults;
				if($n = $_POST[$this->id][$preset]['name'])
					$options[$preset]['name'] = $n;
				elseif($preset=='preset-default')
					$options[$preset]['name'] = 'Default';
				else{
					list($junk,$id) = explode("-",$preset);
					$options[$preset]['name'] = 'New Preset '.$id;
				}
				update_option($this->id,$options);
				$presets[$preset] = $options[$preset]['name'];
			}
			if($_POST['delete']){
				check_admin_referer($this->id.'-editpreset-'.$preset);
				$options = $this->getConfig();
				unset($options[$preset]);
				unset($presets[$preset]);
				update_option($this->id,$options);
				list($preset,$name) = each($presets);
			}

			$index = 1;
			while($presets["preset-$index"]) $index++;
			$presets["preset-$index"] = __('New Preset','premiumpress_advancedsearch');

			$linkBase = $_SERVER['REQUEST_URI'];
			$linkBase = preg_replace("/&?selected-preset=[^&]*(&|$)/",'',$linkBase);
			foreach($presets as $key=>$name){
				$config = $this->getConfig($key);
				if($config && $config['name']) $name=$config['name'];
				if(($n = $_POST[$this->id][$key]['name'])&&(!$_POST['delete']))
					$name = $n;
				$presets[$key]=$name;
			}
			$plugin=&$this;
			ob_start();
			wp_nonce_field($this->id.'-editpreset-'.$preset);
			$hidden = ob_get_contents();
			$hidden.="<input type='hidden' name='selected-preset' value='$preset'>";
			$shouldSave = $_POST['selected-preset'] && !$_POST['delete'] && check_admin_referer($this->id.'-editpreset-'.$preset);
			ob_end_clean();
			
			/* premium press theme layout */
			$STRING = $hidden; 
			$STRING .= $plugin->configForm($preset,$shouldSave);

			print $STRING;
 
		}
		function process_tag($content){
			$regex = '/\[\s*premiumpress_advancedsearch\s+(?:([^\]=]+(?:\s+.*)?))?\]/';
			return preg_replace_callback($regex, array(&$this, 'generate_from_tag'), $content);
		}
		function process_shortcode($atts,$content){
			return $this->generate_from_tag(array("",$atts['preset']));
		}
		function generate_from_tag($reMatches){
			global $CustomSearchFieldStatic;
			ob_start();

			$preset=$reMatches[1];
			if(!$preset) $preset = 'default';
			compat_method_exists111($preset);

			$form = ob_get_contents();
			ob_end_clean();
			return $form;
		}
	}
	global $CustomSearchFieldStatic;
	$CustomSearchFieldStatic['Inputs'] = array();
	$CustomSearchFieldStatic['Types'] = array();

	class AdminDropDown1 extends DropDownField {
		function AdminDropDown1($name,$value,$options,$params=array()){
			AdminDropDown1::__construct($name,$value,$options,$params);
		}
		function __construct($name,$value,$options,$params=array()){
			$params['options'] = $options;
			$params['id'] = $params['name'];
			parent::__construct($params);
			$this->name = $name;
			$this->value = $value;
		}
		function getHTMLName(){
			return $this->name;
		}
		function getValue(){
			return $this->value;
		}
		function getInput(){
			return parent::getInput($this->name,null);
		}
	}

if (!function_exists('json_encode'))
{
  function json_encode($a=false)
  {
    if (is_null($a)) return 'null';
    if ($a === false) return 'false';
    if ($a === true) return 'true';
    if (is_scalar($a))
    {
      if (is_float($a))
      {
        // Always use "." for floats.
        return floatval(str_replace(",", ".", strval($a)));
      }

      if (is_string($a))
      {
        static $jsonReplaces = array(array("\\", "/", "\n", "\t", "\r", "\b", "\f", '"'), array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));
        return '"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $a) . '"';
      }
      else
        return $a;
    }
    $isList = true;
    for ($i = 0, reset($a); $i < count($a); $i++, next($a))
    {
      if (key($a) !== $i)
      {
        $isList = false;
        break;
      }
    }
    $result = array();
    if ($isList)
    {
      foreach ($a as $v) $result[] = json_encode($v);
      return '[' . join(',', $result) . ']';
    }
    else
    {
      foreach ($a as $k => $v) $result[] = json_encode($k).':'.json_encode($v);
      return '{' . join(',', $result) . '}';
    }
  }
}
function PPT_AdvancedSearch($presetName='default'){
	global $CustomSearchFieldStatic;
	if(strpos($presetName,'preset-')!==0) $presetName="preset-$presetName";
	$CustomSearchFieldStatic['Object']->renderWidget(array('widget_id'=>$presetName,'noTitle'=>true),array('number'=>$presetName));
}
function compat_method_exists1($class,$method){
	return method_exists($class,$method) || in_array(strtolower($method),get_class_methods($class));
}


 



class ParameterisedObject {
	var $params=array();
	function ParameterisedObject($params=array()){
		$this->__construct($params);
	}
	function __construct($params=array()){
		$this->setParams($params);
		if(!is_array($this->params)){
			foreach(debug_backtrace() as $trace){
				extract($trace);
				echo "<li>$file:$line $class.$function</li>";
			}
			die("<h1>".get_class($this)."</h1>");
		}
	}

	function setParams($params){
		$this->params=$params;
	}

	function param($key,$default=null){
		if(!array_key_exists($key,$this->params)) return $default;
		return $this->params[$key];
	}
}











class DB_WP_Widget1 extends ParameterisedObject {
	function DB_WP_Widget1($name,$params=array()){
		DB_WP_Widget1::__construct($name,$params);
	}
	function __construct($name,$params=array()){
		parent::__construct($params);
		$this->name = $name;
		$this->id = strtolower(get_class($this));
		$options = get_option($this->id);


//		register_sidebar_widget($this->name,array(&$this,'renderWidget'));
		$doesOwnConfig = $this->param('doesOwnConfig',false);
		$desc = $this->param('description',$this->name);
		$widget_ops = array('classname' => $this->id, 'description' => __($desc));
		$control_ops = array('width' => 400, 'height' => 350, 'id_base' => $this->id);
		$name = $this->name;
	 
	}

	function setParams($params){
		parent::setParams($this->overrideParams($params));
	}

	function getDefaults(){
		return array('doesOwnConfig'=>false);
	}
	function overrideParams($params){
		foreach($this->getDefaults() as $k=>$v){
			if(!array_key_exists($k,$params)) $params[$k] = $v;
		}
		return $params;
	}

	function renderWidget(){
		echo "<h1>Unconfigured Widget</h1>";
	}

	function defaultWidgetConfig(){
		return array('exists'=>'1');
	}
	function getConfig($id=null,$key=null){
		$options = get_option($this->id);
		if(is_null($id)) return $options;
		if(!@array_key_exists($id,$options))
			$id = preg_replace('/^.*-(\d+)$/','\\1',$id);
		if(is_null($key))
			return $options[$id];
		else 
			return $options[$id][$key];
	}
	function configForm($args,$force=false){
		static $first;
		global $wp_registered_widgets;

		if ( !is_array($args) )
			$args = array( 'number' => $args );

		$args = wp_parse_args($args,array('number'=>-1));
		static $updated = array();

		$options = get_option($this->id);

		if(!$updated[$this->id] && ($_POST['sidebar'] || $force)){
			$updated[$this->id]=true;
			$sidebar = (string) $_POST['sidebar'];
			$default_options=$this->defaultWidgetConfig();

			$sidebars_widgets = wp_get_sidebars_widgets();
			if ( isset($sidebars_widgets[$sidebar]) )
				$this_sidebar = $sidebars_widgets[$sidebar];
			else
				$this_sidebar = array();

			foreach ( $this_sidebar as $_widget_id ) {
				$callback = $wp_registered_widgets[$_widget_id]['callback'];
			       if(is_array($callback) && get_class($callback[0])==get_class($this) && isset($wp_registered_widgets[$_widget_id]['params'][0]['number']) ) {{
				       $PPT_ID = $wp_registered_widgets[$_widget_id]['params'][0]['number'];
			       }
				if ( !in_array( "$this->id-$PPT_ID", $_POST['widget-id'] ) ) 
					unset($options[$PPT_ID]);
				}
			}
			foreach ((array)$_POST[$this->id] as $PPT_ID => $posted) {
				if(!isset($posted['exists']) && isset($options[$PPT_ID]))continue;

				$widgetOptions = $this->form_processPost($posted,$options[$PPT_ID]);
				$options[$PPT_ID] = $widgetOptions;
			}
			update_option($this->id,$options);
		}
		global $mycount;
		if(-1==$args['number']){
			$args['number']='%i%';
			$values = $default_options;
		} else {
			$values = $options[$args['number']];
		}
		$this->form_outputForm($values,$this->id.'['.$args['number'].']');
	}
	function form_processPost($post,$old){
		return array('exists'=>1);
	}
	function form_outputForm($old,$pref){
		$this->form_existsInput($pref);
	}
	function form_existsInput($pref){
		echo "<input type='hidden' name='".$pref."[exists]' value='1'/>";
	}

	function nameAsId(){
		return strtolower(str_replace(" ","_",$this->name));
	}
}












class DB_Search_Widget1 extends DB_WP_Widget1 {
	var $inputs = array();

	function DB_Search_Widget1($name){
		DB_Search_Widget1::__construct($name);
	}
	function __construct($name='Custom',$params=array()){
	 global $PT;
		parent::__construct(sprintf(__('%1$s Search','premiumpress_advancedsearch'),$name),$params);
		
		if(!isset($_GET['search-class']) ){
		return;
		}
		
		add_filter('query_string', array( $PT, 'ppt_query_string' ) );
		 
		add_filter('posts_join',array(&$this,'join_meta'));
		add_filter('posts_where',array(&$this,'sql_restrict'));
		add_filter('posts_groupby', array(&$this,'sql_group'));
		add_filter('posts_orderby', array(&$this,'sql_orderby'));
		add_filter('home_template',array(&$this,'rewriteHome'));
		add_filter('page_template',array(&$this,'rewriteHome'));
		add_filter( 'get_search_query', array(&$this,'getSearchDescription'));
		 
	}
	
	function sql_orderby( $orderby ){
	
	global $wpdb; 
	
	
	if(!isset($_GET['search-class'])){ return $orderby; }
	
	$link = curPageURL();
 
	
	if(isset($_GET['key']) && isset($_GET['order']) && isset($_GET['orderby']) ){	
	
		// CHECK WHICH VALUE TO ORDER BY
		switch($_GET['key']){
		
			case "title": { $query = "$wpdb->posts.post_title"; } break;
			case "author": { $query = "$wpdb->posts.post_author"; } break;
			case "modified": { $query = "$wpdb->posts.post_modified"; } break;
			case "comment_count": { $query = "$wpdb->posts.comment_count"; } break;
			default: {
			
			// WE NEED TO CHECK THE LINK TO SEE WHICH ORDER VALUE TO ORDERBY
			// SO WE THEN CAN ADJUST OUT QUERY STRING
			$bit1 = explode($_GET['key']."-",$link);
			if(isset($bit1[1])){
				$bit2 = explode("=",$bit1[1]);				
				$checkis = substr($bit2[1],0,1);
			}
			 
			
			if(isset($bit2[0]) && is_numeric($bit2[0]) && isset($checkis) && $checkis != "&" ){ $query = "meta".$bit2[0].".meta_value"; }else{ $query = "meta1.meta_value"; }
		
			} break;	
		
		}
		
		// ADD ON ORDER ASC/DESC
		if(strtolower($_GET['order']) == "asc"){
		
			$query .= " ASC";
		
		}else{
		
			$query .= " DESC";
		
		}
	 
	}else{
	return $orderby; 
	}
	
	 
	 
	return $query;
 
	
	}
	
	function loadTranslations(){
		static $loaded;
		 
	}
	function addInput($input){
		$this->inputs[] = $input;
	}
 

	function getInputs($params){
		return $this->inputs;
	}

	function getTitle(){
		return $this->param('description',$this->name);
	}

	function renderWidget($params=array(),$p2 = array()){
		$title = $this->getTitle($params);
		$inputs = $this->getInputs($params);
		
		
		$hidden = "<input type='hidden' name='search-class' value='".$this->getPostIdentifier()."'/>";
		$formCssClass = 'custom_search widget custom_search_'.$this->nameAsId();
		$formAction = home_url(); //get_option('home');
		if(function_exists('locate_template'))	 
			  
		
		 $formTemplate = $hidden;
		
		// BUILT DISPLAY OUTPUT
		$i=0; 
		foreach($inputs as $input){ 
	 
	 
		$joinerVal = $input->param('joiner');
		// WE WANT TO PASS IN THE DIV OF THE NEXT FORM FIELD TO POPULATE
		
		if($joinerVal == "LocationJoiner"){
		
			$divid = "id='".$joinerVal."_div'";	
			$ex = 'display:visible;';
			
		}elseif($joinerVal == "LocationJoiner1" || $joinerVal == "LocationJoiner2"){
		
			$divid = "id='".$joinerVal."_div'";			 
			//$ex = 'display:none;';
		 
		}else{
		
			$divid = "";
			$ex = $input->params['css'];
					 
		}
	 
		$formTemplate .= "<div class='ppt_search_inputbox' ".$divid." style='".$ex."'>".$input->getInput()."<div class='clearfix'></div></div>";  
		
		$i++; } 
	
			$formTemplate .="";
			
			 

		foreach($inputs as $k=>$v){
			if($v->isHidden()){
				$hidden.=$v->getInput(false);
				unset($inputs[$k]);
			}
		}
		 echo $formTemplate;
	}

	function isPosted(){
		
		if(isset($_GET['search-class'])){ return $_GET['search-class'] == $this->getPostIdentifier();/*$_GET['search-class'] == $this->getPostIdentifier();*/}
	
		
	}
	function getPostIdentifier(){
		return get_class($this).'-'.$this->id;
	}
	function isHome($isHome){
		return $isHome && !$this->isPosted();
	}
	function rewriteHome($homeTemplate){
		if($this->isPosted()) return get_query_template('search');
		return $homeTemplate;
	}

	function join_meta($join){
	

		if($this->isPosted()){
			$desc = array();
			foreach($this->getInputs("preset-default") as $input){
				$join = $input->join_meta($join);
				$desc = $input->describeSearch($desc);
			}
			if($desc){
				$desc = join(__(" and ",'premiumpress_advancedsearch'),$desc);
			} else {
				$desc = __("All Entries",'premiumpress_advancedsearch');
			}
			$this->desc=$desc;
		}
		return $join;
	}

	function getSearchDescription($desc){
		if($this->isPosted()) return $this->desc;
		return $desc;
	}
	function sql_restrict($where){
	
		if(isset($GLOBALS['query_total_num']) && $GLOBALS['query_total_num'] == 0){ return; }
	
		if($this->isPosted()){
			global $wpdb;
			/** This could possibly be considered invasive, need to think this bit through
			 * properly.
			 */
			 
			 
			$where = preg_replace("_AND\s*\(ID\s*=\s*'\d+'\)_","",$where);
			$where = preg_replace("/AND $wpdb->posts.post_type = '(post|page)'/","",$where);
			$where.= " AND ($wpdb->posts.post_type='post')";
			foreach($this->getInputs("preset-default") as $input){
			 
				$where = $input->sql_restrict($where);
				
				 //echo $where; mark v8
			}
		}
		return $where;
	}
	function sql_group($group){
		if($this->isPosted()){
			global $wpdb;
			$group = "$wpdb->posts.ID";
		}
		return $group;
	}

	function toSearchString(){
	}
}





class SearchFieldBase {
	function SearchFieldBase(){
		SearchFieldBase::__construct();
	}
	function __construct(){
		add_filter('search_params',array(&$this,'form_inputs'));
		static $index;
		$this->index = ++$index;
	}
	function form_inputs($form){
		die("Unimplemented function ".__CLASS__.".".__FUNCTION__);
	}
	function sql_restrict($where){
		die("Unimplemented function ".__CLASS__.".".__FUNCTION__);
	}
}








class Field extends ParameterisedObject {
	function getValue($name){
		if(isset($_REQUEST[$this->getHTMLName($name)])){
		$v =  $_REQUEST[$this->getHTMLName($name)];
		}else{
		$v =  "";
		}
		
		if(get_magic_quotes_gpc()) $v= stripslashes($v);
		return $v;
	}

	function getHTMLName($name){
		return 'cs-'.str_replace(" ","_",$name);
	}

	function getInput($name){
		$htmlName = $this->getHTMLName($name);
		$value = $this->getValue($name);
		return "<input name='$htmlName' value='$value' />";
	}
	function getCSSClass(){
		return get_class($this);
	}
}












class TextField extends Field {
}
class TextInput extends TextField{} 


// ADVANCED DROP DOWN LIST FOR SELECTING SUB LEVEL PARENT ITEMS
class DropDownFieldAdvanced extends Field {

	function DropDownField($params=array()){
		$this->__construct($params);
	}
	function __construct($params = array()){
		parent::__construct($params);
		if($optionString = $this->param('dropdownoptions',false)){
			$options=array();
			$optionPairs = explode('*',$optionString);
			foreach($optionPairs as $option){
				list($k,$v) = explode(':',$option);
				if(!$v) $v=$k;
				$options[$k]=$v;
			}
		} else {
			$options = $this->param('options',array());
		}
		$this->options = $options;
	}

	function getOptions($joiner,$name){
	
	$joinerVal = $this->param('joiner');
	$id = $this->getHTMLName($name);
	$countryJoiner = array("LocationJoiner","LocationJoiner1","LocationJoiner2");
  
 
		if($this->param('fromDb',!$this->options)){
		
			$options = array(''=>__('-------','premiumpress_advancedsearch')); $auto = array();
			
			// 1. FIND OUT WHICH VALUE WERE SEARCHING			 
			if( in_array($joinerVal,$countryJoiner) ){
			
			// 2. COUNT THE NUMBER OF FIELDS SO WE KNOW IF WE ARE DISPLAYING OUT CORRECTLY
			$d = get_option('ppt_s'); $typecounter = 0;
 			foreach($d['preset-default'] as $jtype){
			
				if(in_array($jtype['joiner'] ,$countryJoiner) ){ $typecounter++; }			 
			
			}
			
			
			// --- COUNTRY --- 
			if($joinerVal == "LocationJoiner"){// ONLY GET TOP DATA FOR COUNTRY LIST
			 
			 	$terms = get_terms("location",array("hide_empty"=>false, "parent"=>0, "fields" => "names")); $count = count($terms);
			
			// --- STATE ---	 
			}elseif($joinerVal == "LocationJoiner1"){ // GET LIST OF STATES
			 
			 	$STATES = get_terms("location",array("hide_empty"=>false));  //, "fields" => "names"
				
				$secondlevelids = array();
				// WE ONLY WANT THE STATES
				foreach($STATES as $state){				
				
					if($state->parent == 0){ continue; }
				
						// CHECK IF THIS IS 2ND LEVEL OR 3RD
						//echo $state->parent ."!=".  $LASTID."<br>";print_r($state);
						if(!in_array($state->parent,$secondlevelids)){
						
							$terms[] = $state->name;
							$secondlevelids[] = $state->term_id;
						}				
				}	
				
				$count = count($terms);
				
			// --- CITY ---	 
			}elseif($joinerVal == "LocationJoiner2"){ // GET LIST OF STATES
			 
			 	$STATES = get_terms("location",array("hide_empty"=>false));  //, "fields" => "names"
				
				$secondlevelids = array();
				// WE ONLY WANT THE STATES
				foreach($STATES as $state){				
				
					if($state->parent == 0){ continue; }
				
						// CHECK IF THIS IS 2ND LEVEL OR 3RD
						//echo $state->parent ."!=".  $LASTID."<br>";print_r($state);
						if(in_array($state->parent,$secondlevelids)){
						
							$terms[] = $state->name;
							
						}else{
							$secondlevelids[] = $state->term_id;
						}				
				}	
				
				$count = count($terms);
				
			 
			 }elseif(isset($_GET['search-class'])){
			 
			   // TODO // ADD DEFAULT VALUE
			 }else{
			
			 }
			  
			 if ( $count > 0 && is_array($terms) ){
			 foreach ( $terms as $term ) {  
			 
			 // 2. CHECK IF THE NEXT BOX IS A LOCATION OTHERWISE WE NEED TO PUT IN VALUES RATHER THAN IDS
			 //if($typecounter >  1){ $auto[$term->term_id] = $term->name; }else{  $auto[''.$term->name.''] = $term->name; }
			 $auto[''.$term.''] = $term;
			 
			 
			 } } //''.str_replace("%2B","+",$term->name).''
			
			}else{			
			// CUSTOM FIELD VALUE STORED AS $name
			
			 
			}
			
			//$auto = $joiner->getAllOptions($name);
			 
			
			// WE ONLY WANT TO GET PARENT ITEMS 
			//$auto = array("1"=>"Name", "2"=>"Name Two". );
			
			asort($auto); // order A-z
			$options +=$auto;
			
			return $options;
			
		} else {
			return $this->options;
		}
	}
	
	function getMarksValue($name){
	 
		if(isset($_REQUEST[$this->getHTMLName($name)."-none"])){
		$v =  $_REQUEST[$this->getHTMLName($name)."-none"];
		}else{
		$v =  "";
		}
		
		if(get_magic_quotes_gpc()) $v= stripslashes($v);
		return $v;
	}
	function getInput($name,$joiner,$fieldName=null){
		if(!$fieldName) $fieldName=$name;
		
		//$v = $this->getValue($name);
		//$v1 = $this->getMarksValue($name);
		 
	 
		$id = $this->getHTMLName($name);
		$joinerVal = $this->param('joiner');
		
		// NEW TO KNOW HOW MANY LIS BOXES WE'VE ADDED
		$countryJoiner = array("LocationJoiner","LocationJoiner1","LocationJoiner2");
		$d = get_option('ppt_s'); $typecounter = 0;
		foreach($d['preset-default'] as $jtype){ if(in_array($jtype['joiner'] ,$countryJoiner) ){ $typecounter++; } }


 		$options =""; $SHOWREFRESH = false;
		
		// DISPLAY CURRENT VALUE		
		if(isset($_GET[$id])){
		
			$options ="<option value='".strip_tags($_GET[$id])."' $checked>".strip_tags($_GET[$id])."</option>";
			
			$SHOWREFRESH = true;
			
			/*$term = get_term_by('name', strip_tags($_GET[$id]), 'location' ); 
			 
			// 3. GET THE NEW LIST OF VALUES FOR THE USER TO SELECT  
			$args = array(
						'taxonomy'              => 'location',
						'child_of'              => $term->parent,
						'hide_empty'            => 0,
						'hierarchical'          => 0,
						'use_desc_for_title'	=> 1,			 
						);
			
			$categories = get_categories($args); $secondlevelids = array(); 
			 
			foreach($categories as $category) {	
				$options .= "<option value='".$category->name."'>".$category->name."</option>";								 
						
			}*/
		
		
		
		}else{
		
			foreach($this->getOptions($joiner,$fieldName) as $option=>$label){
			
				//$checked = ($option==$v || $option==$v1)?" selected='selected'":"";
				 
				$option = trim(htmlspecialchars($option,ENT_QUOTES));
				if(is_string($label)){
				$label = htmlspecialchars($label,ENT_QUOTES);
				}
			 
				$options.="<option value='$option'>$label</option>";
			}
		
		}
		 
		// WE WANT TO PASS IN THE DIV OF THE NEXT FORM FIELD TO POPULATE
		if($joinerVal == "LocationJoiner"){
		$nextDiv = "LocationJoiner1";	 
		$preDiv = "'top'";
		
			// WE NEED TO KNOW IF THERE IS THE NEXT FIELD TO DISPLAY THE ONCHANGE EVENT
			$onChange = false;		 
			$d = get_option('ppt_s');		
			foreach($d['preset-default'] as $checkme){
				if(is_array($checkme)){ $foundjoiners[] = $checkme['joiner']; }
			
			}
			if(in_array("LocationJoiner1",$foundjoiners)){ $onChange =true; }
		
		}elseif($joinerVal == "LocationJoiner1"){
		$nextDiv = "LocationJoiner2";
		$preDiv = "document.getElementById('LocationJoiner_ID').value";	 
		
			// WE NEED TO KNOW IF THERE IS THE NEXT FIELD TO DISPLAY THE ONCHANGE EVENT
			$onChange = false;		 
			$d = get_option('ppt_s');		
			foreach($d['preset-default'] as $checkme){
				if(is_array($checkme)){ $foundjoiners[] = $checkme['joiner']; }
			
			}
			if(in_array("LocationJoiner2",$foundjoiners)){ $onChange =true; }
		
		}else{
		$nextDiv = "LocationJoiner2";	
		$preDiv = "document.getElementById('LocationJoiner1_ID').value";
		} 
		 
		// 
		$STRING = "<div id=\"".trim($joinerVal)."_innerdiv\">";
		  
		$STRING .= "<select name='$id' id='".trim($joinerVal)."_ID' $atts class='selectBox-dropdown' ";
		
		if($onChange){ $STRING .= "onChange=\"PPTSearchLocation(this.value,'".$id."','".trim($nextDiv)."','".$typecounter."','".str_replace("http://","",get_home_url())."');\""; }
		
		$STRING .=">$options</select>";
		
		if($SHOWREFRESH){ $STRING .= "<a href='javascript:void(0);' class='refreshclist' onClick=\"PPTRefreshLocation(".$preDiv.",'".$id."','".trim($joinerVal)."', '".$typecounter."','".str_replace("http://","",get_home_url())."');\" ><img src='".PPT_FW_IMG_URI."refresh.png' align='absmiddle' style='margin-left:2px;' /></a>"; }
	 
		$STRING .="</div>";
		
		return $STRING;
		
		
	}
	function getConfigForm($id,$values){ 
	return "";
		return "
		<br /><fieldset style='margin-left:0px; background:#f7ece5;'>
		
		<label for='$id-dropdown-options'><b>Customize Your Drop Down List Box Options</b></label>
		
		<p>Here you can customize the selection values in your drop down box, separate each with a asterix (eg. 1*2*3*4).</p>
		
		 <input id='$id-dropdown-options' name='$id"."[dropdownoptions]' value='$values[dropdownoptions]' style='width:95%;padding:5px;'/>
		 <small>Note. If you want custom values and labels use the syntax [value] label* . Example: [100] $100*[200] $200</small>
		 
		 </fieldset>
		 ";
	
	}
}






class DropDownField extends Field {
	function DropDownField($params=array()){
		$this->__construct($params);
	}
	function __construct($params = array()){
		parent::__construct($params);
		if($optionString = $this->param('dropdownoptions',false)){
			$options=array();
			$optionPairs = explode('*',$optionString);
			 
			foreach($optionPairs as $option){ 
				list($k,$v) = explode(':',$option);
				if(!$v) $v=$k;
				$options[$k]=$v;
			}
		 
		} else {
			$options = $this->param('options',array());
		}
		$this->options = $options;
	}

	function getOptions($joiner,$name){
 
		if($this->param('fromDb',!$this->options)){
			$options = array(''=>__('-------','premiumpress_advancedsearch'));
			$auto = $joiner->getAllOptions($name);
			
			if($joiner->params['joiner'] == "CategoryJoiner"){ 
		 	
			}else{
			asort($auto);
			}
			
			$options +=$auto;
			return $options;
		} else {
			return $this->options;
		}
	}
	function getInput($name,$joiner,$fieldName=null){
		if(!$fieldName) $fieldName=$name;
		$v = $this->getValue($name);
		$id = $this->getHTMLName($name);

 		$options ="";
		  
		foreach($this->getOptions($joiner,$fieldName) as $option=>$label){
		
			
			$option = trim(htmlspecialchars($option,ENT_QUOTES));
			
			if(strpos($option, "[") !== false){
			
			$a = explode("[",$option);
			$aa = explode("]",$a[1]);
			$label = $aa[1]; 
			$option =  $aa[0]; 
			}
			
			$checked = ($option==$v)?" selected='selected'":"";
			
			$label = htmlspecialchars($label,ENT_QUOTES);
			
			
			
			$options.="<option value='$option'$checked>". html_entity_decode($label)."</option>";
		}
		$atts = '';
		if(isset($this->params['onChange']) && $this->params['onChange']) $atts = ' onchange="'.htmlspecialchars($this->params['onChange']).'"';
		if(isset($this->params['id']) && $this->params['id']) $atts .= ' id="'.htmlspecialchars($this->params['id']).'"';
		if(isset($this->params['css_class']) && $this->params['css_class']) $atts .= ' class="'.htmlspecialchars($this->params['css_class']).'"';
		return "<select name='$id'$atts class='selectBox-dropdown' >$options</select>";
	}
	function getConfigForm($id,$values){ 
	
		return "
		<br /><fieldset style='margin-left:0px; background:#f7ece5;'>
		
		<label for='$id-dropdown-options'><b>Customize Your Drop Down List Box Options</b></label>
		
		<p>Here you can customize the selection values in your drop down box, separate each with a asterix (eg. 1*2*3*4).</p>
		
		 <input id='$id-dropdown-options' name='$id"."[dropdownoptions]' value='$values[dropdownoptions]' style='width:95%;padding:5px;'/>
		 <small>Note. If you want custom values and labels use the syntax [value] label* . Example: [100] $100*[200] $200</small>
		 
		 </fieldset>
		 ";
	
	}
}









class SliderField extends Field {

 
	function SliderField(){
	
	
	
		$func_args = func_get_args();
		call_user_func_array(array($this,'__construct'),$func_args);
	}
	function __construct($params = array()){
		$params['hidden']=true;
		parent::__construct($params);
	}
	function getValue(){
		return $this->param('constant-value',null);
	}

	function getInput($name){
		$v=$this->getValue($name);
		$id = $this->getHTMLName($name);
		$dd = explode("-",$id);
		
		
		
		
		$string ="<input type='hidden' name='".htmlspecialchars($name)."' value='".htmlspecialchars($v)."' id='".$id."save' />"; // important, stores value
		
		
		$string .= '<div class="clearfix"></div>
		
		<div id="'.$id.'slider" class="pptnumslider">
			<div id="'.$id.'slider-bar" class="pptnumslider-bar">
				<div id="'.$id.'slider-handle" class="pptnumslider-handle"><p id="'.$id.'percent" class="pptnumpercent"></p></div>
			</div>
		</div>

<div id="debug"></div>

    <script type="text/javascript">
    // <![CDATA[
        var hWidth, bWidth, slide; 

	 
	function setBgPos(v) {
		var off = v * hWidth-10;
		var pos = -bWidth + (v * bWidth);
		$(\''.$id.'slider\').setStyle({backgroundPosition: Math.round(v/'.$v.'*230-220) + \'px\'});
	}
	
		Event.observe(window, \'load\', function() {
    	hWidth = $(\''.$id.'slider-handle\').getWidth();
    	bWidth = $(\''.$id.'slider-bar\').getWidth();
		var slider1 = new Control.Slider(\''.$id.'slider-handle\', \''.$id.'slider-bar\', {
				range: $R(0,'.$v.'),	
			 	 
				sliderValue: 10,				 
				onSlide: function(v) { updateSlider'.$dd[1].'(v); },
				onChange: function(v) { updateSlider'.$dd[1].'(v); }
			});
		
		}); 
        
        function updateSlider'.$dd[1].'(v) { setBgPos(v);
            $(\''.$id.'percent\').update(Math.round(v));
			$(\''.$id.'save\').value = Math.round(v);
        } 
      
    // ]]>
    </script>';
		
		
		return $string;
	}
	function getConfigForm($id,$values){
		return "<br /><label for='$id-constant-value'><b>Maxium Slider Value</b><small>e.g, 100</small></label><input id='$id-constant-value' name='$id"."[constant-value]' value='{$values['constant-value']}'/>";
	}
} 


class HiddenField extends Field {
	function HiddenField(){
		$func_args = func_get_args();
		call_user_func_array(array($this,'__construct'),$func_args);
	}
	function __construct($params = array()){
		$params['hidden']=true;
		parent::__construct($params);
	}
	function getValue(){
		return $this->param('constant-value',null);
	}

	function getInput($name){
		$v=$this->getValue($name);
		$id = $this->getHTMLName($name);
		return "<input type='hidden' name='".htmlspecialchars($name)."' value='".htmlspecialchars($v)."'/>";
	}
	function getConfigForm($id,$values){
		return "<br /><label for='$id-constant-value'><b>Constant Value</b></label><input id='$id-constant-value' name='$id"."[constant-value]' value='{$values['constant-value']}'/>";
	}
}

















class DropDownFromValues extends DropDownField {
	function DropDownFromValues($params=array()){
		$this->__construct($params);
	}

	function __construct($params=array()){
		$params['fromDb'] = true;
		parent::__construct(array(),$params);
	}

	function getConfigForm($id,$values){
		return "";
	}
}
class RadioButtonField extends Field {
	function RadioButtonField($options=array(),$params=array()){
		RadioButtonField::__construct($options,$params);
	}
	function __construct($params=array()){
	$options= "";
		parent::__construct($params);
		if($params['radiobuttonoptions']){
			$options=array();
			$optionPairs = explode('*',$params['radiobuttonoptions']);
			foreach($optionPairs as $option){
				list($k,$v) = explode(':',$option);
				if(!$v) $v=$k;
				$options[$k]=$v;
			}
		}
		$this->options = $options;
	}
	function getOptions($joiner,$name){
		if($this->param('fromDb',!$this->options)){
			return $joiner->getAllOptions($name);
		} else {
			return $this->options;
		}
	}
	function getInput($name,$joiner,$fieldName=null){
		if(!$fieldName) $fieldName=$name;
		$v = $this->getValue($name);
		$id = $this->getHTMLName($name);

		$options = '';
		foreach($this->getOptions($joiner,$fieldName) as $option=>$label){
			$option = htmlspecialchars($option,ENT_QUOTES);
			$label = htmlspecialchars($label,ENT_QUOTES);
			
			if(strpos($option, "[") !== false){
			
			$a = explode("[",$option);
			$aa = explode("]",$a[1]);
			$label = $aa[1]; 
			$option =  $aa[0]; 
			}
			
			$checked = ($option==$v)?" checked='true'":"";
			$htmlId = "$id-$option";

			$options.="<div class='radio'><label for='$htmlId'>$label</label> <input type='radio' name='$id' value='$option' $checked  /> </div>"; // id='$htmlId'
		}
		$options.= "<div class='clearfix'></div>";
		return $options;
	}
	function getCSSClass(){
		return "RadioButton";
	}
	function getConfigForm($id,$values){
	
	
	return "
		<br /><fieldset style='margin-left:0px; background:#f7ece5;'>
		
		<label for='$id-dropdown-options'><b>Customize Your Radio Buttons</b></label>
		
		<p>Here you can customize the selection values in your drop down box, separate each with a asterix (eg. 1*2*3*4).</p>
		
		 <input id='$id-radiobutton-options' name='$id"."[radiobuttonoptions]' value='$values[radiobuttonoptions]' style='width:95%;padding:5px;'/>
		 <small>Note. If you want custom values and labels use the syntax [value] label* . Example: [100] $100*[200] $200</small>
		 
		 </fieldset>
		 ";
	
	 
	}
}
class RadioButtonFromValues extends RadioButtonField {
	function RadioButtonFromValues($fieldName=null){
		RadioButtonFromValues::__construct($fieldName);
	}

	function __construct($fieldName=null,$params){
		$params['fromDb'] = true;
		parent::__construct($options,$params);
	}
	function getConfigForm($id,$values){
		return "";
	}
}

class Comparison {
	function addSQLWhere($field,$value){
		die("Unimplemented function ".__CLASS__.".".__FUNCTION__);
	}
	function describeSearch($value){
		die("Unimplemented function ".__CLASS__.".".__FUNCTION__);
	}
}
class EqualComparison extends Comparison {
	function addSQLWhere($field,$value){
		return "$field = '$value'";
	}
	function describeSearch($value){
		return sprintf(__(' is "%1$s"','premiumpress_advancedsearch'),$value);
	}
}
class LikeComparison extends Comparison{
	function addSQLWhere($field,$value){
		return $this->getLikeString($field,$value);
	}
	function getLikeString($field,$value){
	
	if($field == "meta1.name"){
	return "$field = '$value'";
	}else{
	return "$field LIKE '%$value%'";
	}
		
	}
	function describeSearch($value){
		return sprintf(__(' contains "%1$s"','premiumpress_advancedsearch'),$value);
	}
}

class WordsLikeComparison extends LikeComparison {
	function addSQLWhere($field,$value){
		$words = explode(" ",$value);
		$like = array(1);
		foreach($words as $word){
			$like[] = $this->getLikeString($field,$word);
		}
		return "(".join(" AND ",$like).")";
	}
	function describeSearch($value){
		return sprintf(__(' contains "%1$s"','premiumpress_advancedsearch'),join('"'.__(" and ",'premiumpress_advancedsearch').'"',explode(" ",$value)));
	}
}
class LessThanComparison extends Comparison{
	function addSQLWhere($field,$value){
		return "$field < '$value'";
	}
	function describeSearch($value){
		return sprintf(__(' less than "%1$s"','premiumpress_advancedsearch'),$value);
	}
}
class AtMostComparison extends Comparison{
	function addSQLWhere($field,$value){
		return "$field <= '$value'";
	}
	function describeSearch($value){
		return sprintf(__(' at most "%1$s"','premiumpress_advancedsearch'),$value);
	}
}
class AtLeastComparison extends Comparison{
	function addSQLWhere($field,$value){
		return "$field >= '$value'";
	}
	function describeSearch($value){
		return sprintf(__(' at least "%1$s"','premiumpress_advancedsearch'),$value);
	}
}
class MoreThanComparison extends Comparison{
	function addSQLWhere($field,$value){
		return "$field > '$value'";
	}
	function describeSearch($value){
		return sprintf(__(' more than "%1$s"','premiumpress_advancedsearch'),$value);
	}
}
class RangeComparison extends Comparison{
	function addSQLWhere($field,$value){
	
	
		list($min,$max) = explode("-",$value);
		$where=1;
		if(strlen($min)>0) $where.=" AND $field >= $min";
		if(strlen($max)>0) $where.=" AND $field <= $max";
		return $where;
	}
	function describeSearch($value){
		list($min,$max) = explode("-",$value);
		if(strlen($min)==0) return sprintf(__(' less than "%1$s"','premiumpress_advancedsearch'),$max);
		if(strlen($max)==0) return sprintf(__(' more than "%1$s"','premiumpress_advancedsearch'),$min);
		return sprintf(__(' between "%1$s" and "%2$s"','premiumpress_advancedsearch'),$min,$max);
	}
}
class NotEqualComparison extends Comparison {
	function addSQLWhere($field,$value){
		return "$field != '$value'";
	}
	function describeSearch($value){
		return sprintf(__(' is not "%1$s"','premiumpress_advancedsearch'),$value);
	}
}

class BaseJoiner extends ParameterisedObject {
	function BaseJoiner($name=null,$params=array()){
		$this->__construct($name,$params);
	}
	function __construct($name=null,$params=array()){
		parent::__construct($params);
		$this->name=$name;
	}
	function sql_join($join,$name,$index,$value){
		return $join;
	}
	function process_where($where){
		return $where;
	}
	function needsField(){
		return true;
	}
}


class CustomFieldJoiner extends BaseJoiner{
	function CustomFieldJoiner($name,$params){
		$this->__construct($name,$params);
	}
	function __construct($name,$params){
		$this->params = $params;
	}
	function param($key,$default=null){
		if(array_key_exists($key,$this->params)) return $this->params[$key];
		return $default;
	}
	function sql_restrict($name,$index,$value,$comparison){
		$table = 'meta'.$index;
		$field = "$table.meta_value".($this->param('numeric',false)?'*1':'');
		$comp = " AND ".$comparison->addSQLWhere($field,$value);
		$comp = str_replace("***","",$comp);
		if($name!='all')
			$comp = " AND ( $table.meta_key='$name' ".$comp.") ";
		return $comp;

	}
	function sql_join($join,$name,$index,$value){
		if(!$value && !$this->param('required',false)) return $join;
		global $wpdb;
		$table = 'meta'.$index;
		return "$join JOIN $wpdb->postmeta $table ON $table.post_id=$wpdb->posts.id";
	}
	function getAllOptions($fieldName){
		global $wpdb;
		$where='';
		if($fieldName!='all')
			$where = " WHERE meta_key='$fieldName'";
		$q = mysql_query($sql = "SELECT DISTINCT meta_value FROM $wpdb->postmeta m JOIN $wpdb->posts p ON m.post_id=p.id AND p.post_status='publish' $where");
		$options = array();
		while($r = mysql_fetch_row($q))
			$options["***".$r[0]] = $r[0];
		return $options;
	}
	function getSuggestedFields(){
		global $wpdb;
		$q = mysql_query($sql = "SELECT DISTINCT meta_key FROM $wpdb->postmeta WHERE meta_key NOT LIKE '\\_%'");
		$options = array('all'=>'All Fields');
		while($r = mysql_fetch_row($q))
			$options[$r[0]] = $r[0];
		return $options;
	}
}


class spacer extends CategoryJoiner {
	 
}
class spacer1 extends CategoryJoiner {
	 
}
class LocationJoiner extends CategoryJoiner {
	function getTaxonomy(){
		return $this->param('taxonomy','location');
	}
}
class LocationJoiner1 extends CategoryJoiner {
	function getTaxonomy(){
		return $this->param('taxonomy','location');
	}
}
class LocationJoiner2 extends CategoryJoiner {
	function getTaxonomy(){
		return $this->param('taxonomy','location');
	}
}
class NetworkJoiner extends CategoryJoiner {
	function getTaxonomy(){
		return $this->param('taxonomy','network');
	}
}
class StoresJoiner extends CategoryJoiner {
	function getTaxonomy(){
		return $this->param('taxonomy','store');
	}
}

class CategoryJoiner extends BaseJoiner {
	function sql_restrict($name,$index,$value,$comparison){
		if(!($value || $this->params['required'])) return $join;
		$table = 'meta'.$index;
		return " AND ( ".$comparison->addSQLWhere("$table.slug",$value).")";
	}
	function getTaxonomy(){
		return $this->param('taxonomy','category');
	}
	function getTaxonomyWhere($table){
		return "`$table`.taxonomy='".$this->getTaxonomy()."'";
	}
	function sql_join($join,$name,$index,$value){
		if(!($value || isset($this->params['required']) && $this->params['required'])) return $join;
		global $wpdb;
		$table = 'meta'.$index;
		$rel = 'rel'.$index;
		$tax = 'tax'.$index;
		return $join." JOIN $wpdb->term_relationships $rel ON $rel.object_id=$wpdb->posts.id JOIN  $wpdb->term_taxonomy $tax ON $tax.term_taxonomy_id=$rel.term_taxonomy_id JOIN $wpdb->terms $table ON $table.term_id=$tax.term_id AND ".$this->getTaxonomyWhere($tax);
	}
	function getAllOptions($fieldName){
	
		global $wpdb;
	
		$exCats = str_replace(",-","",get_option('article_cats')); $ShowCatCount = get_option("display_categories_count");
		
		$args = array(
		'taxonomy'                 => "category",
		'child_of'                 => 0,
		'hide_empty'               => 0,
		'hierarchical'             => true,
		'exclude'                  => $exCats,
		//'orderby' 				   => "id"
		);
 	
		$cats  = get_categories( $args );
 
		$newcatarray = array(); $addedAlready = array(); $returnArray = array();
	
		// NOW WE BUILD A CLEAN ARRAY OF VALUES
		foreach($cats as $cat){	
		 
			if($cat->parent != 0){ continue; }		
			$newcatarray[$cat->term_id]['term_id'] 	=  $cat->term_id;
			$newcatarray[$cat->term_id]['name'] 	=  $cat->cat_name;
			$newcatarray[$cat->term_id]['parent'] 	=  $cat->parent;
			$newcatarray[$cat->term_id]['slug'] 	=  $cat->slug;
			$newcatarray[$cat->term_id]['count'] 	=  $cat->count;
		}
		// SECOND LOOP TO GET CHILDREN
		foreach($cats as $cat){
	 
			if($cat->parent == 0){ continue; }		
			$newcatarray[$cat->parent]['child'][] = $cat;		 
		}
		
		 
		foreach($newcatarray as $cat){
		 	
			// SHOW CAT COUNT
			if($ShowCatCount == "yes"){ $extra1 = " (".$cat['count'].")"; }else{ $extra1 = ""; }
			
			// CHECK IF THIS IS SELECTED
			//if( ( is_array($id) && in_array($cat['term_id'],$id) ) ||  ( !is_array($id) && $id == $cat['term_id'] ) ){ $EX1 = 'selected=selected'; }else{ $EX1 = ""; }			 
			
			if(!in_array($cat['term_id'], $addedAlready) && $cat['name'] !=""){ 	 
			$returnArray[$cat['slug']] =  $cat['name'].''.$extra1;
			}
			
			$addedAlready[] = $cat['term_id'];
			 	
			if(!empty($cat['child'])){	
				foreach($cat['child'] as $sub1){ 
				 
				//if(isset($lastCatID) && $sub1->parent != $lastCatID){ continue; }
				//$lastCatID = $sub1->parent;
							 
							// SHOW COUNT
							if($ShowCatCount == "yes"){ $extra2 = " (".$sub1->count.")"; }else{ $extra2 = ""; }
							
							// CHECK IF THIS IS SELECTED
							//if( ( is_array($id) && in_array($sub1->term_id,$id) ) ||  ( !is_array($id) && $id == $sub1->term_id ) ){ $EX2 = 'selected=selected'; }else{ $EX2 = ""; }
														
							// OUTPUT
							if(!in_array($sub1->term_id, $addedAlready)){ 							
							$returnArray[$sub1->slug] =  "-- ".$sub1->name.''.$extra2;
							}
							$addedAlready[] = $sub1->term_id;
							 
							// CHECK FOR SUB CATS LEVEL 2
							if(!empty($newcatarray[$sub1->term_id])){ $z=0;
								foreach($newcatarray[$sub1->term_id] as $sub2){								
								 
									// SHOW COUNT
									if($ShowCatCount == "yes"){ $extra3 = " (".$sub2[$z]->count.")"; }else{ $extra3 = ""; }
									
									// CHECK IF THIS IS SELECTED
									//if( ( is_array($id) && in_array($sub2[$z]->term_id,$id) ) ||  ( !is_array($id) && $id == $sub2[$z]->term_id ) ){ $EX3 = 'selected=selected'; }else{ $EX3 = ""; }
									 
									// OUTPUT
									if(!in_array($sub2[$z]->term_id, $addedAlready)){ 									
									$returnArray[$sub2[$z]->slug] =  "---- ".$sub2[$z]->name.''.$extra3;
									}
									$addedAlready[] = $sub2[$z]->term_id;						
									
									
									// CHECK FOR SUB CATS LEVEL 2
									if(!empty($newcatarray[$sub2[$z]->term_id])){ $zz=0;
										foreach($newcatarray[$sub2[$z]->term_id] as $sub3){
										
											// SHOW COUNT
											if($ShowCatCount == "yes"){ $extra4 = " (".$sub3[$z]->count.")"; }else{ $extra4 = ""; }
											
											// CHECK IF THIS IS SELECTED
											//if( ( is_array($id) && in_array($sub3[$z]->term_id,$id) ) ||  ( !is_array($id) && $id == $sub3[$z]->term_id ) ){ $EX4 = 'selected=selected'; }else{ $EX4 = ""; }
											 
											// OUTPUT
											if(!in_array($sub3[$z]->term_id, $addedAlready)){ 										
											$returnArray[$sub3[$z]->slug] =  "------ ".$sub3[$z]->name.''.$extra4;
											}
											$addedAlready[] = $sub3[$z]->term_id;											
										
											$zz++;										
										}										
									}
									
									$z++;
									
								}
							}
							
				}
			}
		 

		} // end foreach
 
		return $returnArray;
		
	}
	function needsField(){
		return false;
	}
}
class TagJoiner extends CategoryJoiner {
	function getTaxonomy(){
		return $this->param('taxonomy','post_tag');
	}
}

class PostTypeJoiner extends BaseJoiner {
	function process_where($where){
		global $wpdb;
		 
		$where = preg_replace("/AND \($wpdb->posts.post_type *= *'(post|page)'\)/","",$where);
		return $where;
	}
	function sql_restrict($name,$index,$value,$comparison){
		global $wpdb;
		if(!($value || $this->params['required'])) return $join;
		return " AND ( ".$comparison->addSQLWhere("$wpdb->posts.post_type",$value).")";
	}
	function getAllOptions($fieldName){
		global $wpdb;
		
		//$q = mysql_query($sql = "SELECT distinct post_type FROM $wpdb->posts p WHERE post_status='publish' ");
		//$options = array();
		//print_r($options);
		//while($r = mysql_fetch_row($q))
			//$options[$r[0]] = $r[0];
			
		// UNSET A FEW WE DONT WANT TO DISPLAY
		$options['post'] 		 = "Listings";
		$options['article_type'] = "Articles";	
		//$options['faq_type'] 	 = "FAQ";	
		return $options;
	}
	function needsField(){
		return false;
	}
}

class PostDataJoiner extends BaseJoiner {
	function sql_restrict($name,$index,$value,$comparison){
		global $wpdb;
		$table = $wpdb->posts;
		if($name=='all'){
			$logic = array();
			foreach($this->getSuggestedFields() as $name=>$desc){
				if($name=='all') continue;
				$logic[] =  "( ".$comparison->addSQLWhere("$table.$name",$value).") ";
			}
			$logic = " AND (".join(" OR ",$logic).")";
			return $logic;
		} else {
			return " AND ( ".$comparison->addSQLWhere("$table.$name",$value).") ";
		}
	}
	function sql_join($join,$name,$index,$value){
		return $join;
	}
	function getAllOptions($fieldName){
		global $wpdb;
		$q = mysql_query($sql = "SELECT ".PPTCLEAN($fieldName)." FROM $wpdb->posts");
		$options = array();
		while($r = mysql_fetch_row($q))
			$options[$r[0]] = $r[0];
		return $options;
	}
	function getSuggestedFields(){
		return array(
			'all'=>__('All Fields','premiumpress_advancedsearch'),
			'post_content'=>__('Body Text','premiumpress_advancedsearch'),
			'post_title'=>__('Title','premiumpress_advancedsearch'),
			'post_author'=>__('Author','premiumpress_advancedsearch'),
			'post_date'=>__('Date','premiumpress_advancedsearch'),
		);
	}
}

class CategorySearch {
}

class CustomSearchField extends SearchFieldBase {
	function CustomSearchField($nameOrParams,$input=false,$comparison=false,$joiner=false){
		CustomSearchField::__construct($nameOrParams,$input,$comparison,$joiner);
	}
	function __construct($nameOrParams,$input=false,$comparison=false,$joiner=false){
		parent::__construct();
		if(!is_array($nameOrParams)){
			$params = array('name'=>$nameOrParams);
		} else {
			$params = $nameOrParams;
		}
		$this->name = $params['name'];
		$this->params = $params;

		$this->joiner = $joiner;
		$this->comparison = $comparison;
		$this->input = $input;

		if(!is_object($this->input)){
			$input = $this->param('input','TextField');
			$this->input = new $input($params);
		}
		if(!is_object($this->comparison)){
			$comparison = $this->param('comparison','LikeComparison');
			$this->comparison = new $comparison();
		}
		if(!is_object($this->joiner)){
			$joiner = $this->param('joiner','CustomFieldJoiner');
			$this->joiner = new $joiner($this->param('name'),$this->params);
		}


	}
	function setIndex($n){
		$this->index=$n;
	}
	function param($key,$default=null){
		if(array_key_exists($key,$this->params)) return $this->params[$key];
		return $default;
	}

	function stripInitialForm($form){
		$pref='<!--cs-form-->';
		if(preg_match("/^$pref/",$form)) return $form;
		else return $pref;
	}

	function form_inputs($form){
		$form = $this->stripInitialForm($form);
		return $form.$this->getInput($this->name,$this->joiner);
	}
	function hasValue(){
		return $this->getValue();
	}
	function sql_restrict($where){
		if($this->hasValue()){
			$value = $this->getValue();
			$value = $GLOBALS['wpdb']->escape($value);
			$where.=$this->joiner->sql_restrict($this->name,$this->index,$value,$this->comparison);
		}
		if(method_exists($this->joiner,'process_where'))
			$where = $this->joiner->process_where($where);
		return $where;
	}
	function describeSearch($current){
		if($this->hasValue()){
			$current[] = $this->getLabel()." ".$this->comparison->describeSearch($this->getValue());
		}
		return $current;

	}
	function join_meta($join){
		global $wpdb;
		$join=$this->joiner->sql_join($join,$this->name,$this->index,$this->getValue(),$this->comparison);
		 
		return $join;
	}

	function getQualifiedName(){
		return $this->name.'-'.$this->index;
	}
	function getOldValue(){ return $this->getValue(); }
	function getValue(){
		$v = $this->input->getValue($this->getQualifiedName(),$this->name);
		return $v;
	}
	function getLabel(){
		if(!$this->params['label']) $this->params['label'] = ucwords($this->name);
		return $this->params['label'];
	}

	function isHidden(){
		return $this->input->param('hidden',false);
	}
	function getInput($wrap=true){
		$input = $this->input->getInput($this->getQualifiedName(),$this->joiner,$this->name);
		if($wrap){
		$ll = $this->getLabel();
		if(strlen($ll) > 1){
		$input = "<label>".$this->getLabel()."</label> $input ";
		}else{
		$input = " $input ";
		}
			
		}
		return $input;
	}
	function getCSSClass(){
		return method_exists($this->input,'getCSSClass')?$this->input->getCSSClass():get_class($this->input);
	}
}

 

if($debugMode){
	add_filter('posts_request','debug_dump_query');
	function debug_dump_query($query){
		echo "<h1>$query</h1>";
		return $query;
	}
}
?>
